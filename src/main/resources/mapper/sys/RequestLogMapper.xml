<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tb.app.model.sys.mapper.RequestLogMapper">
  <!--通用映射-->
  <sql id="columns">
        a.id AS "id",
        a.request_url AS "requestUrl",
        a.request_json AS "requestJson",
        a.request_type AS "requestType",
        a.request_desc AS "requestDesc",
        a.response_code AS "responseCode",
        a.response_msg AS "responseMsg",
        a.response_json AS "responseJson",
        a.ip AS "ip",
        a.exception AS "exception",
        a.create_date AS "createDate",
        a.update_date AS "updateDate",
        a.del_flag AS "delFlag",
        a.remarks AS "remarks"
  </sql>
  <!--通用joins-->
  <sql id="joins">
    
  </sql>
  <!--带分页的条件查询，可以在where进行逻辑判断-->
  <select id="findList" resultType="RequestLog">
    SELECT
    <include refid="columns" />
     FROM request_log_${year}_${month} a
    <include refid="joins" />
    <where>
      a.del_flag = #{DEL_FLAG_NORMAL}
    </where>
    <choose>
      <when test="page !=null and page.orderBy != null and page.orderBy != ''">
        ORDER BY ${page.orderBy}
      </when>
      <otherwise>
        ORDER BY a.update_date DESC
      </otherwise>
    </choose>
  </select>
  <!--查询全部-->
  <select id="findAllList" resultType="RequestLog">
    SELECT
    <include refid="columns" />
     FROM request_log_${year}_${month} a
    <include refid="joins" />
    <where>
      a.del_flag = #{DEL_FLAG_NORMAL}
    </where>
    <choose>
      <when test="page !=null and page.orderBy != null and page.orderBy != ''">
        ORDER BY ${page.orderBy}
      </when>
      <otherwise>
        ORDER BY a.update_date DESC
      </otherwise>
    </choose>
  </select>
  <!--通用插入-->
  <insert id="insert">
      INSERT INTO request_log_${year}_${month}(
     request_url,
     request_id,
     request_json,
     request_type,
     request_desc,
     response_code,
     response_msg,
     response_json,
     ip,
     exception,
     create_date,
     update_date,
     del_flag,
     remarks
    ) VALUES (
     #{requestUrl},
     #{requestId},
     #{requestJson},
     #{requestType},
     #{requestDesc},
     #{responseCode},
     #{responseMsg},
     #{responseJson},
     #{ip},
     #{exception},
     #{createDate},
     #{updateDate},
     #{delFlag},
     #{remarks}
    )
  </insert>
  
  <insert id="insertBatch">
  
  	INSERT INTO request_log_${year}_${month}(
	     request_url,
	     request_id,
	     request_json,
	     request_type,
	     request_desc,
	     response_code,
	     response_msg,
	     response_json,
	     ip,
	     exception,
	     create_date,
	     update_date,
	     del_flag,
	     remarks
    ) VALUES 
    	<foreach collection="requestLogs" item="item" index="index" separator=",">
				     (#{item.requestUrl},
					     #{item.requestId},
					     #{item.requestJson},
					     #{item.requestType},
					     #{item.requestDesc},
					     #{item.responseCode},
					     #{item.responseMsg},
					     #{item.responseJson},
					     #{item.ip},
					     #{item.exception},
					     #{item.createDate},
					     #{item.updateDate},
					     #{item.delFlag},
					     #{item.remarks})
		</foreach>
  
  </insert>
  
  
  <!--通用更新-->
  <update id="update">
      UPDATE request_log_${year}_${month} SET
        id = #{id},
        exception = #{exception},
        request_url = #{requestUrl},
        request_json = #{requestJson},
        request_type = #{requestType},
        request_desc = #{requestDesc},
        response_code = #{responseCode},
        response_msg = #{responseMsg},
        response_json = #{responseJson},
        ip = #{ip},
        create_date = #{createDate},
        update_date = #{updateDate},
        del_flag = #{delFlag},
        remarks = #{remarks}
    WHERE id = #{id}
  </update>
  <!--根据ID进行删除-->
  <update id="delete">
      UPDATE ${tableName} SET
      del_flag = #{DEL_FLAG_DELETE}
      WHERE id = #{id}
  </update>
  
  <!--根据ID进行删除-->
  <update id="createYearTable">
     create table IF NOT EXISTS request_log_${year}_01 like request_log_template; 
     create table IF NOT EXISTS request_log_${year}_02 like request_log_template; 
     create table IF NOT EXISTS request_log_${year}_03 like request_log_template; 
     create table IF NOT EXISTS request_log_${year}_04 like request_log_template; 
     create table IF NOT EXISTS request_log_${year}_05 like request_log_template; 
     create table IF NOT EXISTS request_log_${year}_06 like request_log_template; 
     create table IF NOT EXISTS request_log_${year}_07 like request_log_template; 
     create table IF NOT EXISTS request_log_${year}_08 like request_log_template; 
     create table IF NOT EXISTS request_log_${year}_09 like request_log_template; 
     create table IF NOT EXISTS request_log_${year}_10 like request_log_template; 
     create table IF NOT EXISTS request_log_${year}_11 like request_log_template; 
     create table IF NOT EXISTS request_log_${year}_12 like request_log_template; 
  </update>
  
</mapper>